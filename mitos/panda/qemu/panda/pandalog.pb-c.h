/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_panda_2fpandalog_2eproto__INCLUDED
#define PROTOBUF_C_panda_2fpandalog_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _Panda__TaintQueryUniqueLabelSet Panda__TaintQueryUniqueLabelSet;
typedef struct _Panda__SrcInfo Panda__SrcInfo;
typedef struct _Panda__TaintQuery Panda__TaintQuery;
typedef struct _Panda__AttackPoint Panda__AttackPoint;
typedef struct _Panda__TaintQueryHypercall Panda__TaintQueryHypercall;
typedef struct _Panda__CallStack Panda__CallStack;
typedef struct _Panda__Bir Panda__Bir;
typedef struct _Panda__TaintedBranch Panda__TaintedBranch;
typedef struct _Panda__Process Panda__Process;
typedef struct _Panda__NtCreateUserProcess Panda__NtCreateUserProcess;
typedef struct _Panda__NtTerminateProcess Panda__NtTerminateProcess;
typedef struct _Panda__ProcessFile Panda__ProcessFile;
typedef struct _Panda__ProcessKey Panda__ProcessKey;
typedef struct _Panda__ProcessKeyValue Panda__ProcessKeyValue;
typedef struct _Panda__ProcessKeyIndex Panda__ProcessKeyIndex;
typedef struct _Panda__Section Panda__Section;
typedef struct _Panda__SectionMapView Panda__SectionMapView;
typedef struct _Panda__LocalPort Panda__LocalPort;
typedef struct _Panda__LocalPortInit Panda__LocalPortInit;
typedef struct _Panda__VirtualMemory Panda__VirtualMemory;
typedef struct _Panda__TaintedInstr Panda__TaintedInstr;
typedef struct _Panda__TaintedInstrSummary Panda__TaintedInstrSummary;
typedef struct _Panda__LogEntry Panda__LogEntry;


/* --- enums --- */


/* --- messages --- */

struct  _Panda__TaintQueryUniqueLabelSet
{
  ProtobufCMessage base;
  uint64_t ptr;
  size_t n_label;
  uint32_t *label;
};
#define PANDA__TAINT_QUERY_UNIQUE_LABEL_SET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&panda__taint_query_unique_label_set__descriptor) \
    , 0, 0,NULL }


struct  _Panda__SrcInfo
{
  ProtobufCMessage base;
  uint32_t filename;
  uint32_t linenum;
  uint32_t astnodename;
  protobuf_c_boolean has_insertionpoint;
  uint32_t insertionpoint;
};
#define PANDA__SRC_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&panda__src_info__descriptor) \
    , 0, 0, 0, 0,0 }


struct  _Panda__TaintQuery
{
  ProtobufCMessage base;
  uint64_t ptr;
  uint32_t tcn;
  uint32_t offset;
  Panda__TaintQueryUniqueLabelSet *unique_label_set;
};
#define PANDA__TAINT_QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&panda__taint_query__descriptor) \
    , 0, 0, 0, NULL }


struct  _Panda__AttackPoint
{
  ProtobufCMessage base;
  uint32_t info;
  Panda__CallStack *call_stack;
  Panda__SrcInfo *src_info;
};
#define PANDA__ATTACK_POINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&panda__attack_point__descriptor) \
    , 0, NULL, NULL }


struct  _Panda__TaintQueryHypercall
{
  ProtobufCMessage base;
  uint64_t buf;
  uint32_t len;
  size_t n_data;
  uint32_t *data;
  uint32_t num_tainted;
  Panda__CallStack *call_stack;
  Panda__SrcInfo *src_info;
  size_t n_taint_query;
  Panda__TaintQuery **taint_query;
};
#define PANDA__TAINT_QUERY_HYPERCALL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&panda__taint_query_hypercall__descriptor) \
    , 0, 0, 0,NULL, 0, NULL, NULL, 0,NULL }


struct  _Panda__CallStack
{
  ProtobufCMessage base;
  size_t n_addr;
  uint64_t *addr;
};
#define PANDA__CALL_STACK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&panda__call_stack__descriptor) \
    , 0,NULL }


struct  _Panda__Bir
{
  ProtobufCMessage base;
  uint32_t len;
  protobuf_c_boolean cached;
  float highscore;
  char *filename;
  protobuf_c_boolean has_offset;
  uint64_t offset;
};
#define PANDA__BIR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&panda__bir__descriptor) \
    , 0, 0, 0, NULL, 0,0 }


struct  _Panda__TaintedBranch
{
  ProtobufCMessage base;
  Panda__CallStack *call_stack;
  size_t n_taint_query;
  Panda__TaintQuery **taint_query;
};
#define PANDA__TAINTED_BRANCH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&panda__tainted_branch__descriptor) \
    , NULL, 0,NULL }


struct  _Panda__Process
{
  ProtobufCMessage base;
  uint32_t pid;
  char *name;
};
#define PANDA__PROCESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&panda__process__descriptor) \
    , 0, NULL }


struct  _Panda__NtCreateUserProcess
{
  ProtobufCMessage base;
  Panda__Process *cur_p;
  Panda__Process *new_p;
  char *new_long_name;
};
#define PANDA__NT_CREATE_USER_PROCESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&panda__nt_create_user_process__descriptor) \
    , NULL, NULL, NULL }


struct  _Panda__NtTerminateProcess
{
  ProtobufCMessage base;
  Panda__Process *cur_p;
  Panda__Process *term_p;
};
#define PANDA__NT_TERMINATE_PROCESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&panda__nt_terminate_process__descriptor) \
    , NULL, NULL }


struct  _Panda__ProcessFile
{
  ProtobufCMessage base;
  Panda__Process *proc;
  char *filename;
};
#define PANDA__PROCESS_FILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&panda__process_file__descriptor) \
    , NULL, NULL }


struct  _Panda__ProcessKey
{
  ProtobufCMessage base;
  Panda__Process *proc;
  char *keyname;
};
#define PANDA__PROCESS_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&panda__process_key__descriptor) \
    , NULL, NULL }


struct  _Panda__ProcessKeyValue
{
  ProtobufCMessage base;
  Panda__ProcessKey *pk;
  char *value_name;
};
#define PANDA__PROCESS_KEY_VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&panda__process_key_value__descriptor) \
    , NULL, NULL }


struct  _Panda__ProcessKeyIndex
{
  ProtobufCMessage base;
  Panda__ProcessKey *pk;
  uint32_t index;
};
#define PANDA__PROCESS_KEY_INDEX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&panda__process_key_index__descriptor) \
    , NULL, 0 }


struct  _Panda__Section
{
  ProtobufCMessage base;
  Panda__Process *proc;
  uint32_t section_id;
  char *name;
  char *file_name;
};
#define PANDA__SECTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&panda__section__descriptor) \
    , NULL, 0, NULL, NULL }


struct  _Panda__SectionMapView
{
  ProtobufCMessage base;
  Panda__Section *section;
  Panda__Process *target;
};
#define PANDA__SECTION_MAP_VIEW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&panda__section_map_view__descriptor) \
    , NULL, NULL }


struct  _Panda__LocalPort
{
  ProtobufCMessage base;
  Panda__Process *proc;
  uint32_t id;
  Panda__Process *client;
  Panda__Process *server;
};
#define PANDA__LOCAL_PORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&panda__local_port__descriptor) \
    , NULL, 0, NULL, NULL }


struct  _Panda__LocalPortInit
{
  ProtobufCMessage base;
  Panda__LocalPort *port;
  char *port_name;
};
#define PANDA__LOCAL_PORT_INIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&panda__local_port_init__descriptor) \
    , NULL, NULL }


struct  _Panda__VirtualMemory
{
  ProtobufCMessage base;
  Panda__Process *proc;
  Panda__Process *target;
};
#define PANDA__VIRTUAL_MEMORY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&panda__virtual_memory__descriptor) \
    , NULL, NULL }


struct  _Panda__TaintedInstr
{
  ProtobufCMessage base;
  Panda__CallStack *call_stack;
  size_t n_taint_query;
  Panda__TaintQuery **taint_query;
};
#define PANDA__TAINTED_INSTR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&panda__tainted_instr__descriptor) \
    , NULL, 0,NULL }


struct  _Panda__TaintedInstrSummary
{
  ProtobufCMessage base;
  uint64_t asid;
  uint64_t pc;
};
#define PANDA__TAINTED_INSTR_SUMMARY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&panda__tainted_instr_summary__descriptor) \
    , 0, 0 }


struct  _Panda__LogEntry
{
  ProtobufCMessage base;
  uint64_t pc;
  uint64_t instr;
  size_t n_dead_data;
  float *dead_data;
  Panda__TaintQueryHypercall *taint_query_hypercall;
  Panda__AttackPoint *attack_point;
  Panda__CallStack *call_stack;
  Panda__Bir *bir;
  Panda__TaintedBranch *tainted_branch;
  protobuf_c_boolean has_asid;
  uint64_t asid;
  char *process_name;
  protobuf_c_boolean has_process_id;
  uint32_t process_id;
  protobuf_c_boolean has_taint_label_virtual_addr;
  uint64_t taint_label_virtual_addr;
  protobuf_c_boolean has_taint_label_physical_addr;
  uint64_t taint_label_physical_addr;
  protobuf_c_boolean has_taint_label_number;
  uint32_t taint_label_number;
  Panda__Process *new_pid;
  Panda__NtCreateUserProcess *nt_create_user_process;
  Panda__NtTerminateProcess *nt_terminate_process;
  Panda__ProcessFile *nt_create_file;
  Panda__ProcessFile *nt_read_file;
  Panda__ProcessFile *nt_delete_file;
  Panda__ProcessFile *nt_write_file;
  Panda__ProcessKey *nt_create_key;
  Panda__ProcessKey *nt_create_key_transacted;
  Panda__ProcessKey *nt_open_key;
  Panda__ProcessKey *nt_open_key_ex;
  Panda__ProcessKey *nt_open_key_transacted;
  Panda__ProcessKey *nt_open_key_transacted_ex;
  Panda__ProcessKey *nt_delete_key;
  Panda__ProcessKey *nt_query_key;
  Panda__ProcessKeyValue *nt_query_value_key;
  Panda__ProcessKeyValue *nt_delete_value_key;
  Panda__ProcessKeyIndex *nt_enumerate_key;
  Panda__ProcessKeyIndex *nt_enumerate_value_key;
  Panda__ProcessKeyValue *nt_set_value_key;
  Panda__Section *nt_create_section;
  Panda__Section *nt_open_section;
  Panda__SectionMapView *nt_map_view_of_section;
  Panda__LocalPortInit *nt_create_port;
  Panda__LocalPortInit *nt_connect_port;
  Panda__LocalPort *nt_listen_port;
  Panda__LocalPort *nt_accept_connect_port;
  Panda__LocalPort *nt_complete_connect_port;
  Panda__LocalPort *nt_request_port;
  Panda__LocalPort *nt_request_wait_reply_port;
  Panda__LocalPort *nt_reply_port;
  Panda__LocalPort *nt_reply_wait_reply_port;
  Panda__LocalPort *nt_reply_wait_receive_port;
  Panda__LocalPort *nt_impersonate_client_of_port;
  Panda__VirtualMemory *nt_read_virtual_memory;
  Panda__VirtualMemory *nt_write_virtual_memory;
  Panda__TaintedInstr *tainted_instr;
  Panda__TaintedInstrSummary *tainted_instr_summary;
};
#define PANDA__LOG_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&panda__log_entry__descriptor) \
    , 0, 0, 0,NULL, NULL, NULL, NULL, NULL, NULL, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/* Panda__TaintQueryUniqueLabelSet methods */
void   panda__taint_query_unique_label_set__init
                     (Panda__TaintQueryUniqueLabelSet         *message);
size_t panda__taint_query_unique_label_set__get_packed_size
                     (const Panda__TaintQueryUniqueLabelSet   *message);
size_t panda__taint_query_unique_label_set__pack
                     (const Panda__TaintQueryUniqueLabelSet   *message,
                      uint8_t             *out);
size_t panda__taint_query_unique_label_set__pack_to_buffer
                     (const Panda__TaintQueryUniqueLabelSet   *message,
                      ProtobufCBuffer     *buffer);
Panda__TaintQueryUniqueLabelSet *
       panda__taint_query_unique_label_set__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   panda__taint_query_unique_label_set__free_unpacked
                     (Panda__TaintQueryUniqueLabelSet *message,
                      ProtobufCAllocator *allocator);
/* Panda__SrcInfo methods */
void   panda__src_info__init
                     (Panda__SrcInfo         *message);
size_t panda__src_info__get_packed_size
                     (const Panda__SrcInfo   *message);
size_t panda__src_info__pack
                     (const Panda__SrcInfo   *message,
                      uint8_t             *out);
size_t panda__src_info__pack_to_buffer
                     (const Panda__SrcInfo   *message,
                      ProtobufCBuffer     *buffer);
Panda__SrcInfo *
       panda__src_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   panda__src_info__free_unpacked
                     (Panda__SrcInfo *message,
                      ProtobufCAllocator *allocator);
/* Panda__TaintQuery methods */
void   panda__taint_query__init
                     (Panda__TaintQuery         *message);
size_t panda__taint_query__get_packed_size
                     (const Panda__TaintQuery   *message);
size_t panda__taint_query__pack
                     (const Panda__TaintQuery   *message,
                      uint8_t             *out);
size_t panda__taint_query__pack_to_buffer
                     (const Panda__TaintQuery   *message,
                      ProtobufCBuffer     *buffer);
Panda__TaintQuery *
       panda__taint_query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   panda__taint_query__free_unpacked
                     (Panda__TaintQuery *message,
                      ProtobufCAllocator *allocator);
/* Panda__AttackPoint methods */
void   panda__attack_point__init
                     (Panda__AttackPoint         *message);
size_t panda__attack_point__get_packed_size
                     (const Panda__AttackPoint   *message);
size_t panda__attack_point__pack
                     (const Panda__AttackPoint   *message,
                      uint8_t             *out);
size_t panda__attack_point__pack_to_buffer
                     (const Panda__AttackPoint   *message,
                      ProtobufCBuffer     *buffer);
Panda__AttackPoint *
       panda__attack_point__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   panda__attack_point__free_unpacked
                     (Panda__AttackPoint *message,
                      ProtobufCAllocator *allocator);
/* Panda__TaintQueryHypercall methods */
void   panda__taint_query_hypercall__init
                     (Panda__TaintQueryHypercall         *message);
size_t panda__taint_query_hypercall__get_packed_size
                     (const Panda__TaintQueryHypercall   *message);
size_t panda__taint_query_hypercall__pack
                     (const Panda__TaintQueryHypercall   *message,
                      uint8_t             *out);
size_t panda__taint_query_hypercall__pack_to_buffer
                     (const Panda__TaintQueryHypercall   *message,
                      ProtobufCBuffer     *buffer);
Panda__TaintQueryHypercall *
       panda__taint_query_hypercall__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   panda__taint_query_hypercall__free_unpacked
                     (Panda__TaintQueryHypercall *message,
                      ProtobufCAllocator *allocator);
/* Panda__CallStack methods */
void   panda__call_stack__init
                     (Panda__CallStack         *message);
size_t panda__call_stack__get_packed_size
                     (const Panda__CallStack   *message);
size_t panda__call_stack__pack
                     (const Panda__CallStack   *message,
                      uint8_t             *out);
size_t panda__call_stack__pack_to_buffer
                     (const Panda__CallStack   *message,
                      ProtobufCBuffer     *buffer);
Panda__CallStack *
       panda__call_stack__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   panda__call_stack__free_unpacked
                     (Panda__CallStack *message,
                      ProtobufCAllocator *allocator);
/* Panda__Bir methods */
void   panda__bir__init
                     (Panda__Bir         *message);
size_t panda__bir__get_packed_size
                     (const Panda__Bir   *message);
size_t panda__bir__pack
                     (const Panda__Bir   *message,
                      uint8_t             *out);
size_t panda__bir__pack_to_buffer
                     (const Panda__Bir   *message,
                      ProtobufCBuffer     *buffer);
Panda__Bir *
       panda__bir__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   panda__bir__free_unpacked
                     (Panda__Bir *message,
                      ProtobufCAllocator *allocator);
/* Panda__TaintedBranch methods */
void   panda__tainted_branch__init
                     (Panda__TaintedBranch         *message);
size_t panda__tainted_branch__get_packed_size
                     (const Panda__TaintedBranch   *message);
size_t panda__tainted_branch__pack
                     (const Panda__TaintedBranch   *message,
                      uint8_t             *out);
size_t panda__tainted_branch__pack_to_buffer
                     (const Panda__TaintedBranch   *message,
                      ProtobufCBuffer     *buffer);
Panda__TaintedBranch *
       panda__tainted_branch__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   panda__tainted_branch__free_unpacked
                     (Panda__TaintedBranch *message,
                      ProtobufCAllocator *allocator);
/* Panda__Process methods */
void   panda__process__init
                     (Panda__Process         *message);
size_t panda__process__get_packed_size
                     (const Panda__Process   *message);
size_t panda__process__pack
                     (const Panda__Process   *message,
                      uint8_t             *out);
size_t panda__process__pack_to_buffer
                     (const Panda__Process   *message,
                      ProtobufCBuffer     *buffer);
Panda__Process *
       panda__process__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   panda__process__free_unpacked
                     (Panda__Process *message,
                      ProtobufCAllocator *allocator);
/* Panda__NtCreateUserProcess methods */
void   panda__nt_create_user_process__init
                     (Panda__NtCreateUserProcess         *message);
size_t panda__nt_create_user_process__get_packed_size
                     (const Panda__NtCreateUserProcess   *message);
size_t panda__nt_create_user_process__pack
                     (const Panda__NtCreateUserProcess   *message,
                      uint8_t             *out);
size_t panda__nt_create_user_process__pack_to_buffer
                     (const Panda__NtCreateUserProcess   *message,
                      ProtobufCBuffer     *buffer);
Panda__NtCreateUserProcess *
       panda__nt_create_user_process__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   panda__nt_create_user_process__free_unpacked
                     (Panda__NtCreateUserProcess *message,
                      ProtobufCAllocator *allocator);
/* Panda__NtTerminateProcess methods */
void   panda__nt_terminate_process__init
                     (Panda__NtTerminateProcess         *message);
size_t panda__nt_terminate_process__get_packed_size
                     (const Panda__NtTerminateProcess   *message);
size_t panda__nt_terminate_process__pack
                     (const Panda__NtTerminateProcess   *message,
                      uint8_t             *out);
size_t panda__nt_terminate_process__pack_to_buffer
                     (const Panda__NtTerminateProcess   *message,
                      ProtobufCBuffer     *buffer);
Panda__NtTerminateProcess *
       panda__nt_terminate_process__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   panda__nt_terminate_process__free_unpacked
                     (Panda__NtTerminateProcess *message,
                      ProtobufCAllocator *allocator);
/* Panda__ProcessFile methods */
void   panda__process_file__init
                     (Panda__ProcessFile         *message);
size_t panda__process_file__get_packed_size
                     (const Panda__ProcessFile   *message);
size_t panda__process_file__pack
                     (const Panda__ProcessFile   *message,
                      uint8_t             *out);
size_t panda__process_file__pack_to_buffer
                     (const Panda__ProcessFile   *message,
                      ProtobufCBuffer     *buffer);
Panda__ProcessFile *
       panda__process_file__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   panda__process_file__free_unpacked
                     (Panda__ProcessFile *message,
                      ProtobufCAllocator *allocator);
/* Panda__ProcessKey methods */
void   panda__process_key__init
                     (Panda__ProcessKey         *message);
size_t panda__process_key__get_packed_size
                     (const Panda__ProcessKey   *message);
size_t panda__process_key__pack
                     (const Panda__ProcessKey   *message,
                      uint8_t             *out);
size_t panda__process_key__pack_to_buffer
                     (const Panda__ProcessKey   *message,
                      ProtobufCBuffer     *buffer);
Panda__ProcessKey *
       panda__process_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   panda__process_key__free_unpacked
                     (Panda__ProcessKey *message,
                      ProtobufCAllocator *allocator);
/* Panda__ProcessKeyValue methods */
void   panda__process_key_value__init
                     (Panda__ProcessKeyValue         *message);
size_t panda__process_key_value__get_packed_size
                     (const Panda__ProcessKeyValue   *message);
size_t panda__process_key_value__pack
                     (const Panda__ProcessKeyValue   *message,
                      uint8_t             *out);
size_t panda__process_key_value__pack_to_buffer
                     (const Panda__ProcessKeyValue   *message,
                      ProtobufCBuffer     *buffer);
Panda__ProcessKeyValue *
       panda__process_key_value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   panda__process_key_value__free_unpacked
                     (Panda__ProcessKeyValue *message,
                      ProtobufCAllocator *allocator);
/* Panda__ProcessKeyIndex methods */
void   panda__process_key_index__init
                     (Panda__ProcessKeyIndex         *message);
size_t panda__process_key_index__get_packed_size
                     (const Panda__ProcessKeyIndex   *message);
size_t panda__process_key_index__pack
                     (const Panda__ProcessKeyIndex   *message,
                      uint8_t             *out);
size_t panda__process_key_index__pack_to_buffer
                     (const Panda__ProcessKeyIndex   *message,
                      ProtobufCBuffer     *buffer);
Panda__ProcessKeyIndex *
       panda__process_key_index__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   panda__process_key_index__free_unpacked
                     (Panda__ProcessKeyIndex *message,
                      ProtobufCAllocator *allocator);
/* Panda__Section methods */
void   panda__section__init
                     (Panda__Section         *message);
size_t panda__section__get_packed_size
                     (const Panda__Section   *message);
size_t panda__section__pack
                     (const Panda__Section   *message,
                      uint8_t             *out);
size_t panda__section__pack_to_buffer
                     (const Panda__Section   *message,
                      ProtobufCBuffer     *buffer);
Panda__Section *
       panda__section__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   panda__section__free_unpacked
                     (Panda__Section *message,
                      ProtobufCAllocator *allocator);
/* Panda__SectionMapView methods */
void   panda__section_map_view__init
                     (Panda__SectionMapView         *message);
size_t panda__section_map_view__get_packed_size
                     (const Panda__SectionMapView   *message);
size_t panda__section_map_view__pack
                     (const Panda__SectionMapView   *message,
                      uint8_t             *out);
size_t panda__section_map_view__pack_to_buffer
                     (const Panda__SectionMapView   *message,
                      ProtobufCBuffer     *buffer);
Panda__SectionMapView *
       panda__section_map_view__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   panda__section_map_view__free_unpacked
                     (Panda__SectionMapView *message,
                      ProtobufCAllocator *allocator);
/* Panda__LocalPort methods */
void   panda__local_port__init
                     (Panda__LocalPort         *message);
size_t panda__local_port__get_packed_size
                     (const Panda__LocalPort   *message);
size_t panda__local_port__pack
                     (const Panda__LocalPort   *message,
                      uint8_t             *out);
size_t panda__local_port__pack_to_buffer
                     (const Panda__LocalPort   *message,
                      ProtobufCBuffer     *buffer);
Panda__LocalPort *
       panda__local_port__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   panda__local_port__free_unpacked
                     (Panda__LocalPort *message,
                      ProtobufCAllocator *allocator);
/* Panda__LocalPortInit methods */
void   panda__local_port_init__init
                     (Panda__LocalPortInit         *message);
size_t panda__local_port_init__get_packed_size
                     (const Panda__LocalPortInit   *message);
size_t panda__local_port_init__pack
                     (const Panda__LocalPortInit   *message,
                      uint8_t             *out);
size_t panda__local_port_init__pack_to_buffer
                     (const Panda__LocalPortInit   *message,
                      ProtobufCBuffer     *buffer);
Panda__LocalPortInit *
       panda__local_port_init__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   panda__local_port_init__free_unpacked
                     (Panda__LocalPortInit *message,
                      ProtobufCAllocator *allocator);
/* Panda__VirtualMemory methods */
void   panda__virtual_memory__init
                     (Panda__VirtualMemory         *message);
size_t panda__virtual_memory__get_packed_size
                     (const Panda__VirtualMemory   *message);
size_t panda__virtual_memory__pack
                     (const Panda__VirtualMemory   *message,
                      uint8_t             *out);
size_t panda__virtual_memory__pack_to_buffer
                     (const Panda__VirtualMemory   *message,
                      ProtobufCBuffer     *buffer);
Panda__VirtualMemory *
       panda__virtual_memory__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   panda__virtual_memory__free_unpacked
                     (Panda__VirtualMemory *message,
                      ProtobufCAllocator *allocator);
/* Panda__TaintedInstr methods */
void   panda__tainted_instr__init
                     (Panda__TaintedInstr         *message);
size_t panda__tainted_instr__get_packed_size
                     (const Panda__TaintedInstr   *message);
size_t panda__tainted_instr__pack
                     (const Panda__TaintedInstr   *message,
                      uint8_t             *out);
size_t panda__tainted_instr__pack_to_buffer
                     (const Panda__TaintedInstr   *message,
                      ProtobufCBuffer     *buffer);
Panda__TaintedInstr *
       panda__tainted_instr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   panda__tainted_instr__free_unpacked
                     (Panda__TaintedInstr *message,
                      ProtobufCAllocator *allocator);
/* Panda__TaintedInstrSummary methods */
void   panda__tainted_instr_summary__init
                     (Panda__TaintedInstrSummary         *message);
size_t panda__tainted_instr_summary__get_packed_size
                     (const Panda__TaintedInstrSummary   *message);
size_t panda__tainted_instr_summary__pack
                     (const Panda__TaintedInstrSummary   *message,
                      uint8_t             *out);
size_t panda__tainted_instr_summary__pack_to_buffer
                     (const Panda__TaintedInstrSummary   *message,
                      ProtobufCBuffer     *buffer);
Panda__TaintedInstrSummary *
       panda__tainted_instr_summary__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   panda__tainted_instr_summary__free_unpacked
                     (Panda__TaintedInstrSummary *message,
                      ProtobufCAllocator *allocator);
/* Panda__LogEntry methods */
void   panda__log_entry__init
                     (Panda__LogEntry         *message);
size_t panda__log_entry__get_packed_size
                     (const Panda__LogEntry   *message);
size_t panda__log_entry__pack
                     (const Panda__LogEntry   *message,
                      uint8_t             *out);
size_t panda__log_entry__pack_to_buffer
                     (const Panda__LogEntry   *message,
                      ProtobufCBuffer     *buffer);
Panda__LogEntry *
       panda__log_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   panda__log_entry__free_unpacked
                     (Panda__LogEntry *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Panda__TaintQueryUniqueLabelSet_Closure)
                 (const Panda__TaintQueryUniqueLabelSet *message,
                  void *closure_data);
typedef void (*Panda__SrcInfo_Closure)
                 (const Panda__SrcInfo *message,
                  void *closure_data);
typedef void (*Panda__TaintQuery_Closure)
                 (const Panda__TaintQuery *message,
                  void *closure_data);
typedef void (*Panda__AttackPoint_Closure)
                 (const Panda__AttackPoint *message,
                  void *closure_data);
typedef void (*Panda__TaintQueryHypercall_Closure)
                 (const Panda__TaintQueryHypercall *message,
                  void *closure_data);
typedef void (*Panda__CallStack_Closure)
                 (const Panda__CallStack *message,
                  void *closure_data);
typedef void (*Panda__Bir_Closure)
                 (const Panda__Bir *message,
                  void *closure_data);
typedef void (*Panda__TaintedBranch_Closure)
                 (const Panda__TaintedBranch *message,
                  void *closure_data);
typedef void (*Panda__Process_Closure)
                 (const Panda__Process *message,
                  void *closure_data);
typedef void (*Panda__NtCreateUserProcess_Closure)
                 (const Panda__NtCreateUserProcess *message,
                  void *closure_data);
typedef void (*Panda__NtTerminateProcess_Closure)
                 (const Panda__NtTerminateProcess *message,
                  void *closure_data);
typedef void (*Panda__ProcessFile_Closure)
                 (const Panda__ProcessFile *message,
                  void *closure_data);
typedef void (*Panda__ProcessKey_Closure)
                 (const Panda__ProcessKey *message,
                  void *closure_data);
typedef void (*Panda__ProcessKeyValue_Closure)
                 (const Panda__ProcessKeyValue *message,
                  void *closure_data);
typedef void (*Panda__ProcessKeyIndex_Closure)
                 (const Panda__ProcessKeyIndex *message,
                  void *closure_data);
typedef void (*Panda__Section_Closure)
                 (const Panda__Section *message,
                  void *closure_data);
typedef void (*Panda__SectionMapView_Closure)
                 (const Panda__SectionMapView *message,
                  void *closure_data);
typedef void (*Panda__LocalPort_Closure)
                 (const Panda__LocalPort *message,
                  void *closure_data);
typedef void (*Panda__LocalPortInit_Closure)
                 (const Panda__LocalPortInit *message,
                  void *closure_data);
typedef void (*Panda__VirtualMemory_Closure)
                 (const Panda__VirtualMemory *message,
                  void *closure_data);
typedef void (*Panda__TaintedInstr_Closure)
                 (const Panda__TaintedInstr *message,
                  void *closure_data);
typedef void (*Panda__TaintedInstrSummary_Closure)
                 (const Panda__TaintedInstrSummary *message,
                  void *closure_data);
typedef void (*Panda__LogEntry_Closure)
                 (const Panda__LogEntry *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor panda__taint_query_unique_label_set__descriptor;
extern const ProtobufCMessageDescriptor panda__src_info__descriptor;
extern const ProtobufCMessageDescriptor panda__taint_query__descriptor;
extern const ProtobufCMessageDescriptor panda__attack_point__descriptor;
extern const ProtobufCMessageDescriptor panda__taint_query_hypercall__descriptor;
extern const ProtobufCMessageDescriptor panda__call_stack__descriptor;
extern const ProtobufCMessageDescriptor panda__bir__descriptor;
extern const ProtobufCMessageDescriptor panda__tainted_branch__descriptor;
extern const ProtobufCMessageDescriptor panda__process__descriptor;
extern const ProtobufCMessageDescriptor panda__nt_create_user_process__descriptor;
extern const ProtobufCMessageDescriptor panda__nt_terminate_process__descriptor;
extern const ProtobufCMessageDescriptor panda__process_file__descriptor;
extern const ProtobufCMessageDescriptor panda__process_key__descriptor;
extern const ProtobufCMessageDescriptor panda__process_key_value__descriptor;
extern const ProtobufCMessageDescriptor panda__process_key_index__descriptor;
extern const ProtobufCMessageDescriptor panda__section__descriptor;
extern const ProtobufCMessageDescriptor panda__section_map_view__descriptor;
extern const ProtobufCMessageDescriptor panda__local_port__descriptor;
extern const ProtobufCMessageDescriptor panda__local_port_init__descriptor;
extern const ProtobufCMessageDescriptor panda__virtual_memory__descriptor;
extern const ProtobufCMessageDescriptor panda__tainted_instr__descriptor;
extern const ProtobufCMessageDescriptor panda__tainted_instr_summary__descriptor;
extern const ProtobufCMessageDescriptor panda__log_entry__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_panda_2fpandalog_2eproto__INCLUDED */
