
syntax = "proto2";
package panda;

message TaintQueryUniqueLabelSet {
    required uint64 ptr = 1;
    repeated uint32 label = 2;
}
message SrcInfo {
    required uint32 filename = 1;
    required uint32 linenum = 2;
    required uint32 astnodename = 3;
    optional uint32 insertionpoint = 4;
}
message TaintQuery {
    required uint64 ptr = 1;
    required uint32 tcn = 2;
    required uint32 offset = 3;
    optional TaintQueryUniqueLabelSet unique_label_set = 4;
}
message AttackPoint {
    required uint32 info = 1;
    required CallStack call_stack = 2;
    required SrcInfo src_info = 3;
}
message TaintQueryHypercall {
    required uint64 buf = 1;
    required uint32 len = 2;
    repeated uint32 data = 3;
    required uint32 num_tainted = 4;
    required CallStack call_stack = 5;
    required SrcInfo src_info = 6;
    repeated TaintQuery taint_query = 7;
}
message CallStack {
    repeated uint64 addr = 1;
}
message Bir {
	required uint32 len = 1;
	required bool cached = 2;
   	required float highscore = 3;
	optional string filename = 4;
    optional uint64 offset = 5;	
}
message TaintedBranch {
    required CallStack call_stack = 1;
    repeated TaintQuery taint_query = 2;
}
message Process {
    required uint32 pid = 1;
    required string name = 2;
}
message NtCreateUserProcess {
    required Process cur_p = 1;
    required Process new_p = 2;
    required string new_long_name = 3;
}
message NtTerminateProcess {
    required Process cur_p = 1;
    required Process term_p = 2;
}
message ProcessFile {
    required Process proc = 1;
    required string filename = 2;
}
message ProcessKey {
    required Process proc = 1;
    required string keyname = 2;
}
message ProcessKeyValue {
    required ProcessKey pk = 1;
    required string value_name = 2;
}
message ProcessKeyIndex {
    required ProcessKey pk = 1;
    required uint32 index = 2;
}
message Section {
    required Process proc = 1;
    required uint32 section_id = 2;
    optional string name = 3;
    optional string file_name = 4;
}
message SectionMapView {
    required Section section = 1;
    required Process target = 2;
}
message LocalPort {
    required Process proc = 1;
    required uint32 id = 2;
    optional Process client = 3;
    optional Process server = 4;
}
message LocalPortInit {
    required LocalPort port = 2;
    required string port_name = 3;
}
message VirtualMemory {
    required Process proc = 1;
    required Process target = 2;
}
message TaintedInstr {
    required CallStack call_stack = 1;
    repeated TaintQuery taint_query = 2;
}
message TaintedInstrSummary {
    required uint64 asid = 1;
    required uint64 pc = 2;
}


message LogEntry {

required uint64 pc = 1;    
required uint64 instr = 2;

repeated float dead_data = 32;
optional TaintQueryHypercall taint_query_hypercall = 38;
optional AttackPoint attack_point = 39;
optional CallStack call_stack = 10;
optional Bir bir = 57;
optional TaintedBranch tainted_branch = 36;
optional uint64 asid = 3; 
optional string process_name = 4;
optional uint32 process_id = 5;
optional uint64 taint_label_virtual_addr = 6;
optional uint64 taint_label_physical_addr = 7;
optional uint32 taint_label_number = 8;
optional Process new_pid = 11;
optional NtCreateUserProcess nt_create_user_process = 12;
optional NtTerminateProcess nt_terminate_process = 13;
optional ProcessFile nt_create_file = 14;
optional ProcessFile nt_read_file = 15;
optional ProcessFile nt_delete_file = 16;
optional ProcessFile nt_write_file = 17;
optional ProcessKey nt_create_key = 18;
optional ProcessKey nt_create_key_transacted = 19;
optional ProcessKey nt_open_key = 20;
optional ProcessKey nt_open_key_ex = 21;
optional ProcessKey nt_open_key_transacted = 22;
optional ProcessKey nt_open_key_transacted_ex = 23;
optional ProcessKey nt_delete_key = 24;
optional ProcessKey nt_query_key = 25;
optional ProcessKeyValue nt_query_value_key = 27;
optional ProcessKeyValue nt_delete_value_key = 28;
optional ProcessKeyIndex nt_enumerate_key = 29;
optional ProcessKeyIndex nt_enumerate_value_key = 30;
optional ProcessKeyValue nt_set_value_key = 31;
optional Section nt_create_section = 40;
optional Section nt_open_section = 41;
optional SectionMapView nt_map_view_of_section = 42;
optional LocalPortInit nt_create_port = 43;
optional LocalPortInit nt_connect_port = 44;
optional LocalPort nt_listen_port = 45;
optional LocalPort nt_accept_connect_port = 46;
optional LocalPort nt_complete_connect_port = 47;
optional LocalPort nt_request_port = 48;
optional LocalPort nt_request_wait_reply_port = 49;
optional LocalPort nt_reply_port = 50;
optional LocalPort nt_reply_wait_reply_port = 51;
optional LocalPort nt_reply_wait_receive_port = 52;
optional LocalPort nt_impersonate_client_of_port = 53;
optional VirtualMemory nt_read_virtual_memory = 54;
optional VirtualMemory nt_write_virtual_memory = 55;
optional TaintedInstr tainted_instr = 37;
optional TaintedInstrSummary tainted_instr_summary = 56;

}
