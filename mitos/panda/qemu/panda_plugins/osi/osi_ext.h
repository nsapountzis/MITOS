#ifndef __OSI_EXT_H__
#define __OSI_EXT_H__

/*
 * DO NOT MODIFY. This file is automatically generated by scripts/apigen.py,
 * based on the <plugin>_int.h file in your plugin directory.
 */

#include <dlfcn.h>
#include "panda_plugin.h"

typedef OsiProcs *(*get_processes_t)(CPUState *env);
static get_processes_t __get_processes = NULL;
static inline OsiProcs * get_processes(CPUState *env);
static inline OsiProcs * get_processes(CPUState *env){
    assert(__get_processes);
    return __get_processes(env);
}
typedef OsiProc *(*get_current_process_t)(CPUState *env);
static get_current_process_t __get_current_process = NULL;
static inline OsiProc * get_current_process(CPUState *env);
static inline OsiProc * get_current_process(CPUState *env){
    assert(__get_current_process);
    return __get_current_process(env);
}
typedef OsiModules *(*get_modules_t)(CPUState *env);
static get_modules_t __get_modules = NULL;
static inline OsiModules * get_modules(CPUState *env);
static inline OsiModules * get_modules(CPUState *env){
    assert(__get_modules);
    return __get_modules(env);
}
typedef OsiModules *(*get_libraries_t)(CPUState *env, OsiProc *p);
static get_libraries_t __get_libraries = NULL;
static inline OsiModules * get_libraries(CPUState *env, OsiProc *p);
static inline OsiModules * get_libraries(CPUState *env, OsiProc *p){
    assert(__get_libraries);
    return __get_libraries(env,p);
}
typedef void(*free_osiproc_t)(OsiProc *p);
static free_osiproc_t __free_osiproc = NULL;
static inline void free_osiproc(OsiProc *p);
static inline void free_osiproc(OsiProc *p){
    assert(__free_osiproc);
    return __free_osiproc(p);
}
typedef void(*free_osiprocs_t)(OsiProcs *ps);
static free_osiprocs_t __free_osiprocs = NULL;
static inline void free_osiprocs(OsiProcs *ps);
static inline void free_osiprocs(OsiProcs *ps){
    assert(__free_osiprocs);
    return __free_osiprocs(ps);
}
typedef void(*free_osimodules_t)(OsiModules *ms);
static free_osimodules_t __free_osimodules = NULL;
static inline void free_osimodules(OsiModules *ms);
static inline void free_osimodules(OsiModules *ms){
    assert(__free_osimodules);
    return __free_osimodules(ms);
}
#define API_PLUGIN_NAME "osi"
#define IMPORT_PPP(module, func_name) { \
 __##func_name = (func_name##_t) dlsym(module, #func_name); \
 char *err = dlerror(); \
 if (err) { \
    printf("Couldn't find %s function in library %s.\n", #func_name, API_PLUGIN_NAME); \
    printf("Error: %s\n", err); \
    return false; \
 } \
}
static inline bool init_osi_api(void);static inline bool init_osi_api(void){
    void *module = panda_get_plugin_by_name("panda_" API_PLUGIN_NAME ".so");
    if (!module) {
        printf("In trying to add plugin, couldn't load %s plugin\n", API_PLUGIN_NAME);
        return false;
    }
    dlerror();
IMPORT_PPP(module, get_processes)
IMPORT_PPP(module, get_current_process)
IMPORT_PPP(module, get_modules)
IMPORT_PPP(module, get_libraries)
IMPORT_PPP(module, free_osiproc)
IMPORT_PPP(module, free_osiprocs)
IMPORT_PPP(module, free_osimodules)
return true;
}

#undef API_PLUGIN_NAME
#undef IMPORT_PPP

#endif
