#ifndef __OSI_LINUX_EXT_H__
#define __OSI_LINUX_EXT_H__

/*
 * DO NOT MODIFY. This file is automatically generated by scripts/apigen.py,
 * based on the <plugin>_int.h file in your plugin directory.
 */

#include <dlfcn.h>
#include "panda_plugin.h"

typedef char *(*osi_linux_fd_to_filename_t)(CPUState *env, OsiProc *p, int fd);
static osi_linux_fd_to_filename_t __osi_linux_fd_to_filename = NULL;
static inline char * osi_linux_fd_to_filename(CPUState *env, OsiProc *p, int fd);
static inline char * osi_linux_fd_to_filename(CPUState *env, OsiProc *p, int fd){
    assert(__osi_linux_fd_to_filename);
    return __osi_linux_fd_to_filename(env,p,fd);
}
typedef unsigned long long(*osi_linux_fd_to_pos_t)(CPUState *env, OsiProc *p, int fd);
static osi_linux_fd_to_pos_t __osi_linux_fd_to_pos = NULL;
static inline unsigned long long osi_linux_fd_to_pos(CPUState *env, OsiProc *p, int fd);
static inline unsigned long long osi_linux_fd_to_pos(CPUState *env, OsiProc *p, int fd){
    assert(__osi_linux_fd_to_pos);
    return __osi_linux_fd_to_pos(env,p,fd);
}
#define API_PLUGIN_NAME "osi_linux"
#define IMPORT_PPP(module, func_name) { \
 __##func_name = (func_name##_t) dlsym(module, #func_name); \
 char *err = dlerror(); \
 if (err) { \
    printf("Couldn't find %s function in library %s.\n", #func_name, API_PLUGIN_NAME); \
    printf("Error: %s\n", err); \
    return false; \
 } \
}
static inline bool init_osi_linux_api(void);static inline bool init_osi_linux_api(void){
    void *module = panda_get_plugin_by_name("panda_" API_PLUGIN_NAME ".so");
    if (!module) {
        printf("In trying to add plugin, couldn't load %s plugin\n", API_PLUGIN_NAME);
        return false;
    }
    dlerror();
IMPORT_PPP(module, osi_linux_fd_to_filename)
IMPORT_PPP(module, osi_linux_fd_to_pos)
return true;
}

#undef API_PLUGIN_NAME
#undef IMPORT_PPP

#endif
