#ifndef __CALLSTACK_INSTR_EXT_H__
#define __CALLSTACK_INSTR_EXT_H__

/*
 * DO NOT MODIFY. This file is automatically generated by scripts/apigen.py,
 * based on the <plugin>_int.h file in your plugin directory.
 */

#include <dlfcn.h>
#include "panda_plugin.h"

typedef int(*get_callers_t)(target_ulong *callers, int n, CPUState *env);
static get_callers_t __get_callers = NULL;
static inline int get_callers(target_ulong *callers, int n, CPUState *env);
static inline int get_callers(target_ulong *callers, int n, CPUState *env){
    assert(__get_callers);
    return __get_callers(callers,n,env);
}
typedef int(*get_functions_t)(target_ulong *functions, int n, CPUState *env);
static get_functions_t __get_functions = NULL;
static inline int get_functions(target_ulong *functions, int n, CPUState *env);
static inline int get_functions(target_ulong *functions, int n, CPUState *env){
    assert(__get_functions);
    return __get_functions(functions,n,env);
}
typedef void(*get_prog_point_t)(CPUState *env, prog_point *p);
static get_prog_point_t __get_prog_point = NULL;
static inline void get_prog_point(CPUState *env, prog_point *p);
static inline void get_prog_point(CPUState *env, prog_point *p){
    assert(__get_prog_point);
    return __get_prog_point(env,p);
}
typedef Panda__CallStack *(*pandalog_callstack_create_t)(void);
static pandalog_callstack_create_t __pandalog_callstack_create = NULL;
static inline Panda__CallStack * pandalog_callstack_create(void);
static inline Panda__CallStack * pandalog_callstack_create(void){
    assert(__pandalog_callstack_create);
    return __pandalog_callstack_create();
}
typedef void(*pandalog_callstack_free_t)(Panda__CallStack *cs);
static pandalog_callstack_free_t __pandalog_callstack_free = NULL;
static inline void pandalog_callstack_free(Panda__CallStack *cs);
static inline void pandalog_callstack_free(Panda__CallStack *cs){
    assert(__pandalog_callstack_free);
    return __pandalog_callstack_free(cs);
}
#define API_PLUGIN_NAME "callstack_instr"
#define IMPORT_PPP(module, func_name) { \
 __##func_name = (func_name##_t) dlsym(module, #func_name); \
 char *err = dlerror(); \
 if (err) { \
    printf("Couldn't find %s function in library %s.\n", #func_name, API_PLUGIN_NAME); \
    printf("Error: %s\n", err); \
    return false; \
 } \
}
static inline bool init_callstack_instr_api(void);static inline bool init_callstack_instr_api(void){
    void *module = panda_get_plugin_by_name("panda_" API_PLUGIN_NAME ".so");
    if (!module) {
        printf("In trying to add plugin, couldn't load %s plugin\n", API_PLUGIN_NAME);
        return false;
    }
    dlerror();
IMPORT_PPP(module, get_callers)
IMPORT_PPP(module, get_functions)
IMPORT_PPP(module, get_prog_point)
IMPORT_PPP(module, pandalog_callstack_create)
IMPORT_PPP(module, pandalog_callstack_free)
return true;
}

#undef API_PLUGIN_NAME
#undef IMPORT_PPP

#endif
