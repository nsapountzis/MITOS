#ifndef __BIR_EXT_H__
#define __BIR_EXT_H__

/*
 * DO NOT MODIFY. This file is automatically generated by scripts/apigen.py,
 * based on the <plugin>_int.h file in your plugin directory.
 */

#include <dlfcn.h>
#include "panda_plugin.h"

typedef void(*index_this_passage_c_t)(void *vpindc, void *vpindex, uint8_t *binary_passage, uint32_t len, uint32_t passage_ind);
static index_this_passage_c_t __index_this_passage_c = NULL;
static inline void index_this_passage_c(void *vpindc, void *vpindex, uint8_t *binary_passage, uint32_t len, uint32_t passage_ind);
static inline void index_this_passage_c(void *vpindc, void *vpindex, uint8_t *binary_passage, uint32_t len, uint32_t passage_ind){
    assert(__index_this_passage_c);
    return __index_this_passage_c(vpindc,vpindex,binary_passage,len,passage_ind);
}
typedef void *(*invert_c_t)(void *vpindc, void *vpindex);
static invert_c_t __invert_c = NULL;
static inline void * invert_c(void *vpindc, void *vpindex);
static inline void * invert_c(void *vpindc, void *vpindex){
    assert(__invert_c);
    return __invert_c(vpindc,vpindex);
}
typedef void(*marshall_index_common_c_t)(void *vpindc);
static marshall_index_common_c_t __marshall_index_common_c = NULL;
static inline void marshall_index_common_c(void *vpindc);
static inline void marshall_index_common_c(void *vpindc){
    assert(__marshall_index_common_c);
    return __marshall_index_common_c(vpindc);
}
typedef void(*marshall_index_c_t)(void *vpindc, void *vpindex, char *file_pfx);
static marshall_index_c_t __marshall_index_c = NULL;
static inline void marshall_index_c(void *vpindc, void *vpindex, char *file_pfx);
static inline void marshall_index_c(void *vpindc, void *vpindex, char *file_pfx){
    assert(__marshall_index_c);
    return __marshall_index_c(vpindc,vpindex,file_pfx);
}
typedef void(*marshall_invindex_c_t)(void *vpindc, void *vpinv, char *file_pfx);
static marshall_invindex_c_t __marshall_invindex_c = NULL;
static inline void marshall_invindex_c(void *vpindc, void *vpinv, char *file_pfx);
static inline void marshall_invindex_c(void *vpindc, void *vpinv, char *file_pfx){
    assert(__marshall_invindex_c);
    return __marshall_invindex_c(vpindc,vpinv,file_pfx);
}
typedef void *(*unmarshall_preprocessed_scores_c_t)(char *filename_pfx);
static unmarshall_preprocessed_scores_c_t __unmarshall_preprocessed_scores_c = NULL;
static inline void * unmarshall_preprocessed_scores_c(char *filename_pfx);
static inline void * unmarshall_preprocessed_scores_c(char *filename_pfx){
    assert(__unmarshall_preprocessed_scores_c);
    return __unmarshall_preprocessed_scores_c(filename_pfx);
}
typedef void(*query_with_passage_c_t)(void *vpindc, void *vppassage, void *vppps, uint32_t *ind, float *score);
static query_with_passage_c_t __query_with_passage_c = NULL;
static inline void query_with_passage_c(void *vpindc, void *vppassage, void *vppps, uint32_t *ind, float *score);
static inline void query_with_passage_c(void *vpindc, void *vppassage, void *vppps, uint32_t *ind, float *score){
    assert(__query_with_passage_c);
    return __query_with_passage_c(vpindc,vppassage,vppps,ind,score);
}
typedef void *(*new_index_common_c_t)(char *filename_prefix, uint32_t min_n_gram, uint32_t max_n_gram, uint32_t passage_len_bytes);
static new_index_common_c_t __new_index_common_c = NULL;
static inline void * new_index_common_c(char *filename_prefix, uint32_t min_n_gram, uint32_t max_n_gram, uint32_t passage_len_bytes);
static inline void * new_index_common_c(char *filename_prefix, uint32_t min_n_gram, uint32_t max_n_gram, uint32_t passage_len_bytes){
    assert(__new_index_common_c);
    return __new_index_common_c(filename_prefix,min_n_gram,max_n_gram,passage_len_bytes);
}
typedef void *(*new_index_c_t)(void);
static new_index_c_t __new_index_c = NULL;
static inline void * new_index_c(void);
static inline void * new_index_c(void){
    assert(__new_index_c);
    return __new_index_c();
}
typedef void(*index_common_set_passage_len_bytes_c_t)(void *vpindc, uint32_t passage_len_bytes);
static index_common_set_passage_len_bytes_c_t __index_common_set_passage_len_bytes_c = NULL;
static inline void index_common_set_passage_len_bytes_c(void *vpindc, uint32_t passage_len_bytes);
static inline void index_common_set_passage_len_bytes_c(void *vpindc, uint32_t passage_len_bytes){
    assert(__index_common_set_passage_len_bytes_c);
    return __index_common_set_passage_len_bytes_c(vpindc,passage_len_bytes);
}
#define API_PLUGIN_NAME "bir"
#define IMPORT_PPP(module, func_name) { \
 __##func_name = (func_name##_t) dlsym(module, #func_name); \
 char *err = dlerror(); \
 if (err) { \
    printf("Couldn't find %s function in library %s.\n", #func_name, API_PLUGIN_NAME); \
    printf("Error: %s\n", err); \
    return false; \
 } \
}
static inline bool init_bir_api(void);static inline bool init_bir_api(void){
    void *module = panda_get_plugin_by_name("panda_" API_PLUGIN_NAME ".so");
    if (!module) {
        printf("In trying to add plugin, couldn't load %s plugin\n", API_PLUGIN_NAME);
        return false;
    }
    dlerror();
IMPORT_PPP(module, index_this_passage_c)
IMPORT_PPP(module, invert_c)
IMPORT_PPP(module, marshall_index_common_c)
IMPORT_PPP(module, marshall_index_c)
IMPORT_PPP(module, marshall_invindex_c)
IMPORT_PPP(module, unmarshall_preprocessed_scores_c)
IMPORT_PPP(module, query_with_passage_c)
IMPORT_PPP(module, new_index_common_c)
IMPORT_PPP(module, new_index_c)
IMPORT_PPP(module, index_common_set_passage_len_bytes_c)
return true;
}

#undef API_PLUGIN_NAME
#undef IMPORT_PPP

#endif
