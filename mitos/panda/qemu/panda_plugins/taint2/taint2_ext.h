#ifndef __TAINT2_EXT_H__
#define __TAINT2_EXT_H__

/*
 * DO NOT MODIFY. This file is automatically generated by scripts/apigen.py,
 * based on the <plugin>_int.h file in your plugin directory.
 */

#include <dlfcn.h>
#include "panda_plugin.h"

typedef void(*taint2_enable_taint_t)(void);
static taint2_enable_taint_t __taint2_enable_taint = NULL;
static inline void taint2_enable_taint(void);
static inline void taint2_enable_taint(void){
    assert(__taint2_enable_taint);
    return __taint2_enable_taint();
}
typedef int(*taint2_enabled_t)(void);
static taint2_enabled_t __taint2_enabled = NULL;
static inline int taint2_enabled(void);
static inline int taint2_enabled(void){
    assert(__taint2_enabled);
    return __taint2_enabled();
}
typedef void(*taint2_label_ram_t)(uint64_t pa, uint32_t l);
static taint2_label_ram_t __taint2_label_ram = NULL;
static inline void taint2_label_ram(uint64_t pa, uint32_t l);
static inline void taint2_label_ram(uint64_t pa, uint32_t l){
    assert(__taint2_label_ram);
    return __taint2_label_ram(pa,l);
}
typedef uint32_t(*taint2_query_t)(Addr a);
static taint2_query_t __taint2_query = NULL;
static inline uint32_t taint2_query(Addr a);
static inline uint32_t taint2_query(Addr a){
    assert(__taint2_query);
    return __taint2_query(a);
}
typedef uint32_t(*taint2_query_ram_t)(uint64_t pa);
static taint2_query_ram_t __taint2_query_ram = NULL;
static inline uint32_t taint2_query_ram(uint64_t pa);
static inline uint32_t taint2_query_ram(uint64_t pa){
    assert(__taint2_query_ram);
    return __taint2_query_ram(pa);
}
typedef uint32_t(*taint2_query_reg_t)(int reg_num, int offset);
static taint2_query_reg_t __taint2_query_reg = NULL;
static inline uint32_t taint2_query_reg(int reg_num, int offset);
static inline uint32_t taint2_query_reg(int reg_num, int offset){
    assert(__taint2_query_reg);
    return __taint2_query_reg(reg_num,offset);
}
typedef uint32_t(*taint2_query_llvm_t)(int reg_num, int offset);
static taint2_query_llvm_t __taint2_query_llvm = NULL;
static inline uint32_t taint2_query_llvm(int reg_num, int offset);
static inline uint32_t taint2_query_llvm(int reg_num, int offset){
    assert(__taint2_query_llvm);
    return __taint2_query_llvm(reg_num,offset);
}
typedef uint32_t(*taint2_query_tcn_t)(Addr a);
static taint2_query_tcn_t __taint2_query_tcn = NULL;
static inline uint32_t taint2_query_tcn(Addr a);
static inline uint32_t taint2_query_tcn(Addr a){
    assert(__taint2_query_tcn);
    return __taint2_query_tcn(a);
}
typedef uint32_t(*taint2_query_tcn_ram_t)(uint64_t pa);
static taint2_query_tcn_ram_t __taint2_query_tcn_ram = NULL;
static inline uint32_t taint2_query_tcn_ram(uint64_t pa);
static inline uint32_t taint2_query_tcn_ram(uint64_t pa){
    assert(__taint2_query_tcn_ram);
    return __taint2_query_tcn_ram(pa);
}
typedef uint32_t(*taint2_query_tcn_reg_t)(int reg_num, int offset);
static taint2_query_tcn_reg_t __taint2_query_tcn_reg = NULL;
static inline uint32_t taint2_query_tcn_reg(int reg_num, int offset);
static inline uint32_t taint2_query_tcn_reg(int reg_num, int offset){
    assert(__taint2_query_tcn_reg);
    return __taint2_query_tcn_reg(reg_num,offset);
}
typedef uint32_t(*taint2_query_tcn_llvm_t)(int reg_num, int offset);
static taint2_query_tcn_llvm_t __taint2_query_tcn_llvm = NULL;
static inline uint32_t taint2_query_tcn_llvm(int reg_num, int offset);
static inline uint32_t taint2_query_tcn_llvm(int reg_num, int offset){
    assert(__taint2_query_tcn_llvm);
    return __taint2_query_tcn_llvm(reg_num,offset);
}
typedef uint64_t(*taint2_query_cb_mask_t)(Addr a, uint8_t size);
static taint2_query_cb_mask_t __taint2_query_cb_mask = NULL;
static inline uint64_t taint2_query_cb_mask(Addr a, uint8_t size);
static inline uint64_t taint2_query_cb_mask(Addr a, uint8_t size){
    assert(__taint2_query_cb_mask);
    return __taint2_query_cb_mask(a,size);
}
typedef void(*taint2_delete_ram_t)(uint64_t pa);
static taint2_delete_ram_t __taint2_delete_ram = NULL;
static inline void taint2_delete_ram(uint64_t pa);
static inline void taint2_delete_ram(uint64_t pa){
    assert(__taint2_delete_ram);
    return __taint2_delete_ram(pa);
}
typedef void(*taint2_labelset_spit_t)(LabelSetP ls);
static taint2_labelset_spit_t __taint2_labelset_spit = NULL;
static inline void taint2_labelset_spit(LabelSetP ls);
static inline void taint2_labelset_spit(LabelSetP ls){
    assert(__taint2_labelset_spit);
    return __taint2_labelset_spit(ls);
}
typedef void(*taint2_labelset_ram_iter_t)(uint64_t pa, int (*app)(uint32_t el, void *stuff1), void *stuff2);
static taint2_labelset_ram_iter_t __taint2_labelset_ram_iter = NULL;
static inline void taint2_labelset_ram_iter(uint64_t pa, int (*app)(uint32_t el, void *stuff1), void *stuff2);
static inline void taint2_labelset_ram_iter(uint64_t pa, int (*app)(uint32_t el, void *stuff1), void *stuff2){
    assert(__taint2_labelset_ram_iter);
    return __taint2_labelset_ram_iter(pa,app,stuff2);
}
typedef void(*taint2_labelset_reg_iter_t)(int reg_num, int offset, int (*app)(uint32_t el, void *stuff1), void *stuff2);
static taint2_labelset_reg_iter_t __taint2_labelset_reg_iter = NULL;
static inline void taint2_labelset_reg_iter(int reg_num, int offset, int (*app)(uint32_t el, void *stuff1), void *stuff2);
static inline void taint2_labelset_reg_iter(int reg_num, int offset, int (*app)(uint32_t el, void *stuff1), void *stuff2){
    assert(__taint2_labelset_reg_iter);
    return __taint2_labelset_reg_iter(reg_num,offset,app,stuff2);
}
typedef void(*taint2_labelset_llvm_iter_t)(int reg_num, int offset, int (*app)(uint32_t el, void *stuff1), void *stuff2);
static taint2_labelset_llvm_iter_t __taint2_labelset_llvm_iter = NULL;
static inline void taint2_labelset_llvm_iter(int reg_num, int offset, int (*app)(uint32_t el, void *stuff1), void *stuff2);
static inline void taint2_labelset_llvm_iter(int reg_num, int offset, int (*app)(uint32_t el, void *stuff1), void *stuff2){
    assert(__taint2_labelset_llvm_iter);
    return __taint2_labelset_llvm_iter(reg_num,offset,app,stuff2);
}
typedef void(*taint2_labelset_iter_t)(LabelSetP ls, int (*app)(uint32_t el, void *stuff1), void *stuff2);
static taint2_labelset_iter_t __taint2_labelset_iter = NULL;
static inline void taint2_labelset_iter(LabelSetP ls, int (*app)(uint32_t el, void *stuff1), void *stuff2);
static inline void taint2_labelset_iter(LabelSetP ls, int (*app)(uint32_t el, void *stuff1), void *stuff2){
    assert(__taint2_labelset_iter);
    return __taint2_labelset_iter(ls,app,stuff2);
}
typedef uint32_t *(*taint2_labels_applied_t)(void);
static taint2_labels_applied_t __taint2_labels_applied = NULL;
static inline uint32_t * taint2_labels_applied(void);
static inline uint32_t * taint2_labels_applied(void){
    assert(__taint2_labels_applied);
    return __taint2_labels_applied();
}
typedef uint32_t(*taint2_num_labels_applied_t)(void);
static taint2_num_labels_applied_t __taint2_num_labels_applied = NULL;
static inline uint32_t taint2_num_labels_applied(void);
static inline uint32_t taint2_num_labels_applied(void){
    assert(__taint2_num_labels_applied);
    return __taint2_num_labels_applied();
}
typedef void(*taint2_track_taint_state_t)(void);
static taint2_track_taint_state_t __taint2_track_taint_state = NULL;
static inline void taint2_track_taint_state(void);
static inline void taint2_track_taint_state(void){
    assert(__taint2_track_taint_state);
    return __taint2_track_taint_state();
}
typedef Panda__TaintQuery *(*taint2_query_pandalog_t)(Addr addr, uint32_t offset);
static taint2_query_pandalog_t __taint2_query_pandalog = NULL;
static inline Panda__TaintQuery * taint2_query_pandalog(Addr addr, uint32_t offset);
static inline Panda__TaintQuery * taint2_query_pandalog(Addr addr, uint32_t offset){
    assert(__taint2_query_pandalog);
    return __taint2_query_pandalog(addr,offset);
}
typedef void(*pandalog_taint_query_free_t)(Panda__TaintQuery *tq);
static pandalog_taint_query_free_t __pandalog_taint_query_free = NULL;
static inline void pandalog_taint_query_free(Panda__TaintQuery *tq);
static inline void pandalog_taint_query_free(Panda__TaintQuery *tq){
    assert(__pandalog_taint_query_free);
    return __pandalog_taint_query_free(tq);
}
#define API_PLUGIN_NAME "taint2"
#define IMPORT_PPP(module, func_name) { \
 __##func_name = (func_name##_t) dlsym(module, #func_name); \
 char *err = dlerror(); \
 if (err) { \
    printf("Couldn't find %s function in library %s.\n", #func_name, API_PLUGIN_NAME); \
    printf("Error: %s\n", err); \
    return false; \
 } \
}
static inline bool init_taint2_api(void);static inline bool init_taint2_api(void){
    void *module = panda_get_plugin_by_name("panda_" API_PLUGIN_NAME ".so");
    if (!module) {
        printf("In trying to add plugin, couldn't load %s plugin\n", API_PLUGIN_NAME);
        return false;
    }
    dlerror();
IMPORT_PPP(module, taint2_enable_taint)
IMPORT_PPP(module, taint2_enabled)
IMPORT_PPP(module, taint2_label_ram)
IMPORT_PPP(module, taint2_query)
IMPORT_PPP(module, taint2_query_ram)
IMPORT_PPP(module, taint2_query_reg)
IMPORT_PPP(module, taint2_query_llvm)
IMPORT_PPP(module, taint2_query_tcn)
IMPORT_PPP(module, taint2_query_tcn_ram)
IMPORT_PPP(module, taint2_query_tcn_reg)
IMPORT_PPP(module, taint2_query_tcn_llvm)
IMPORT_PPP(module, taint2_query_cb_mask)
IMPORT_PPP(module, taint2_delete_ram)
IMPORT_PPP(module, taint2_labelset_spit)
IMPORT_PPP(module, taint2_labelset_ram_iter)
IMPORT_PPP(module, taint2_labelset_reg_iter)
IMPORT_PPP(module, taint2_labelset_llvm_iter)
IMPORT_PPP(module, taint2_labelset_iter)
IMPORT_PPP(module, taint2_labels_applied)
IMPORT_PPP(module, taint2_num_labels_applied)
IMPORT_PPP(module, taint2_track_taint_state)
IMPORT_PPP(module, taint2_query_pandalog)
IMPORT_PPP(module, pandalog_taint_query_free)
return true;
}

#undef API_PLUGIN_NAME
#undef IMPORT_PPP

#endif
